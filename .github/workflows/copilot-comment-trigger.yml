name: Copilot Comment Trigger
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  process-copilot-commands:
    if: |
      (github.event.issue.pull_request || github.event.pull_request) &&
      contains(github.event.comment.body, '@copilot')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Parse Copilot command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const pr = context.payload.issue || context.payload.pull_request;
            
            if (comment.includes('@copilot resolve conflicts')) {
              return { command: 'resolve-conflicts', pr_number: pr.number };
            } else if (comment.includes('@copilot help')) {
              return { command: 'help', pr_number: pr.number };
            }
            return { command: 'unknown', pr_number: pr.number };
      
      - name: Trigger conflict resolution
        if: steps.parse.outputs.command == 'resolve-conflicts'
        uses: actions/github-script@v7
        with:
          script: |
            // Trigger the auto-resolve workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-resolve-conflicts.yml',
              ref: context.ref
            });
            
            // Acknowledge the command
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse.outputs.pr_number }},
              body: 'ðŸ¤– Got it! Starting conflict resolution process...'
            });
      
      - name: Show help
        if: steps.parse.outputs.command == 'help'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse.outputs.pr_number }},
              body: `## ðŸ¤– Copilot Commands
              
              I can help with the following:
              
              - \`@copilot resolve conflicts\` - Automatically resolve merge conflicts
              - \`@copilot help\` - Show this help message
              
              ### How conflict resolution works:
              1. I'll analyze the conflicting changes
              2. Apply smart merge strategies based on file types
              3. Create a commit with the resolved conflicts
              4. Push the changes back to your PR
              
              For more complex scenarios, I'll ask for your guidance.`
            });